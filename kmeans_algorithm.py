# -*- coding: utf-8 -*-
"""Kmeans algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k7u04oBWUO0MLmeAevpRrg6mEl3-3woj
"""

#first need to prepare data
#step1--> need to calculate the distance between 2 points(vectors)
#step2-->need to find the meen of some of points
#step3-->choose randomly points
#step4-->search ezay n2sm el data
#step5-->ezay at3amel m3 el lists
#step6-->iteration on data?

# importing libraries
import numpy as np
import pandas as pd
import math
from random import sample

# get data
filename = '/content/Power_Consumption.csv'
data= np.loadtxt(filename, delimiter=',',dtype=float)
print(data)

# Euclidean distance function
def distance(center, point):
    d = 0.0
    for i in range(0,len(point)):
        d += (center[i]-point[i])**2
    return math.sqrt(d)
#try distance
#point1=[4.216,0.418,234.84,18.4,0,1,17]
#point2=[5.268,0.398,232.91,22.6,0,2,17]
#distance(point1,point2)

#function to return all clusters with there points 
def assignCenters1(centers, dataset):
    clusters = []
    for i in range(len(dataset)):
        distances = [] 
        for center in centers:
            distances.append(distance(center, dataset[i]))
        temp = [z for z, val in enumerate(distances) if val==min(distances)] #select min
        clusters.append(temp[0])
    return clusters

#choose centroid randomly
def randomly_centroids(k,data):
    random_indices = np.random.choice(len(data), size=k, replace=False)
    print(random_indices)
    centroids = data[random_indices,  :]
    return centroids

def Mean(clustersamples):
  lst=[]
  for i in range(len(clustersamples[0])):
     Msum=0
     for j in clustersamples:
       Msum+=j[i]
     lst.append(Msum/len(clustersamples))  
       
  return np.array(lst)

"""main function

"""

print("enter number of clusters")
k = int(input())
centers = randomly_centroids(k,data)
print("first centers")
print(centers)
while True:
  clusters = assignCenters1(centers, data)
  centersNew=centers.copy()
  for i in range(k):
    clustersamples=[sample for j,sample in enumerate(data) if clusters[j]==i]
    centersNew[i]=Mean(clustersamples)
  if(np.abs(np.sum(np.array(centers)-np.array(centersNew)))==0):
    break 
  centers=centersNew 
print("final centers")    
print(centers)
print("final clusters")    
for i in range(k):
    print("cluster: ",i)
    clustersamples=[sample for j,sample in enumerate(data) if clusters[j]==i]
    print(clustersamples)
    print(len(clustersamples))